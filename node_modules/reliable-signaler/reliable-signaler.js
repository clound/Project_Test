// This file handles socket.io based reliable signaling

// require('reliable-signaler')(httpServer || expressServer || portNumber);

exports.ReliableSignaler = ReliableSignaler;

function ReliableSignaler(app, socketCallback) {
    var util = require('util');
    var async = require('async');
    var io = require('socket.io').listen(app, {
        log: false,
        origins: '*:*'
    });

    var listOfRooms = {};

    io.on('connection', function(socket) {
        var currentUser = socket;
        var currentClient = '';
        var Rooms_Creator = [];
        var clearMsg = {};
        var userFriends = [];
        var FlagJoinMeeting = false;

        socket.on('keep-in-server', function(roomid, callback) {
            listOfRooms[roomid] = roomid;
            currentUser.roomid = roomid;
            if(callback) callback();
        });

        socket.on('get-session-info', function(roomid, callback) {
            if (!!listOfRooms[roomid]) {
                callback(listOfRooms[roomid]);
                return;
            }

            //如果服务不存在，则一直去访问调用，直到服务器有人创建这个服务
            (function recursive() {
                if (currentUser && listOfRooms[roomid]) {
                    callback(listOfRooms[roomid]);
                    console.log("resursive");
                    return;
                }
                setTimeout(recursive, 1000);
            })();
        });

        socket.on('message', function(message) {
            socket.broadcast.emit('message', message);
        });

        socket.on('disconnect', function() {
            if (!currentUser) return;

            // autoCloseEntireSession = true;
            if (currentUser && currentUser.roomid && listOfRooms[currentUser.roomid]) {
                delete listOfRooms[currentUser.roomid];
            }
            //  客户端断开时更新用户下线状态
            global.dbHelper.updateUserState(currentClient, false);
            socket.broadcast.emit('_update_friends_state', currentClient);   //  下线时发送信号，让好友去更新好友的在线状态
            //  客户强制退出时清楚房间信息
            if(clearMsg['meeting_routs']) {
                clear_invite_meeting_routs(clearMsg['meeting_routs']);
            }

            currentUser = null;
            currentClient = null;
            console.log('断开 断开 断开！' + socket.id);
        });


        //获取客户端的 用户名
        socket.on("globalUser", function (data) {
            currentClient = data;
            if(!currentClient) {
                //如果用户名为空，则不能初始化任何消息
                //socket.disconnect();
                return;
            }
            console.log("service get client userName:" + currentClient);
            global.dbHelper.updateUserState(currentClient, true);  //客户端连接时更新用户上线状态
            socket.broadcast.emit('_update_friends_state', currentClient);   //  上线时发送信号，让好友去更新好友的在线状态

            //  初始化监听添加好友
            init_AddFriend(socket);
            //  初始化删除好友、从房间中删除用户等等
            init_Delete(socket);
            //  初始化推送消息
            init_PushMessage(socket);
            //  初始化房间信息
            init_HandleRoom(socket);

        });
        //  当客户端获取好友列表的时候， 对应的服务器服务收到该信息， 将好友存储在服务器内存中， 同时去获取好友状态
        socket.on('getFriends', function (friends) {
            userFriends = [];

            async.forEach(friends, function (friend, callback) {
                var user = {
                    name: friend,
                    state: false
                };
                userFriends.push(user);
                callback();
            }, function (err) {
                push_getFriendsState(socket);
            });

        });

        if(socketCallback) {
            socketCallback(socket);
        }

        /************************ function code ************************************/

        /************************  房间处理      *********************/
        function init_HandleRoom(socket) {
            createRoom(socket);
            inviteIntoRoom(socket);

        }
        //  收到创建房间的信号
        function createRoom(socket) {
            socket.on("createRoom", function (roomInfo) {
                clearMsg['OnMeeting_open'] = roomInfo;
                console.log("emit create room:" + roomInfo.owner + " " + roomInfo.sessionid);
                global.dbHelper.createRoom(roomInfo.owner, roomInfo.channel, roomInfo.sessionid, function (err, state) {
                    if(err) {
                        return;
                    }
                    if(state) {
                        console.log('在数据库中创建会议:' + roomInfo.sessionid);

                        // 刷新会议列表
                        push_getRooms(socket);
                    }
                });
            });
        }
        //  邀请好友进房间  踢出用户
        function inviteIntoRoom(socket) {
            socket.on('inviteIntoRoom', function (roomInfo) {
                var friendsModel = global.dbHelper.getModel('userFriends');
                friendsModel.findOne({userName: roomInfo.owner}, function (err, doc) {
                    if(err) {
                        console.log("inviteInRoom err:" + err);
                        return;
                    }
                    if(!doc) {
                        console.log("no friends record");
                        return;
                    } else {
                        for(var m in doc.friends) {
                            if(doc.friends[m].name === roomInfo.friend) {
                                //  将这个邀请信息写入数据库中
                                global.dbHelper.userMeeting_update(roomInfo.friend, {
                                    owner: roomInfo.owner,
                                    channel: roomInfo.channel,
                                    sessionid: roomInfo.sessionid
                                }, function () {
                                    console.log("已将对用户 " + roomInfo.friend + " 的邀请信息记录！");
                                });

                                //  如果用户在线，就广播这个邀请
                                global.dbHelper.getUserState(roomInfo.friend, function (state) {
                                    if (state) {
                                        socket.broadcast.emit("_inviteIntoRoom", roomInfo);
                                    }
                                });
                                return;
                            }
                        }
                        socket.emit("_no user", "用户不存在或不是好友，请先加为好友！");
                    }
                })
            });

            socket.on('success-join-room', function (roomInfo) {
                console.log(roomInfo.friend + " 成功加入会议！" + roomInfo.sessionid);
                clearMsg['OnMeeting_join'] = roomInfo;
                FlagJoinMeeting = true;
                global.dbHelper.addUserInRoom(roomInfo.owner, roomInfo.channel, roomInfo.sessionid, roomInfo.friend, function (err, doc) {
                    if(err) {
                        return;
                    }
                    if(doc) {
                        console.log("user in the meeting!");
                        updateRoomUserState(roomInfo.owner, roomInfo.channel, roomInfo.sessionid, roomInfo.friend, true);
                    }
                });
                global.dbHelper.createSessions(roomInfo.owner, roomInfo.channel, roomInfo.sessionid, roomInfo.friend, function (err, doc) {
                    if(err) {
                        console.log(err);
                        return;
                    }
                    if(doc) {
                        push_getSessions(socket);
                        push_Invite_InRooms(socket);
                        console.log(doc);
                    }
                });
            });

            //  检测是否为活动会议
            socket.on('check-activeMeeting-toServer', function (roomInfo, callback) {
                if(callback && currentUser.roomid && listOfRooms[currentUser.roomid] && clearMsg['OnMeeting_open']) {
                    return (clearMsg['OnMeeting_open'].channel === roomInfo.channel && clearMsg['OnMeeting_open'].sessionid === roomInfo.sessionId)
                        ? callback(true) : callback(false, clearMsg['OnMeeting_open'].sessionid);
                } else {
                    return;
                }
            });

            //  检测是否为加入的会议
            socket.on('check-JoinedMeeting-toServer', function (roomInfo, callback) {
                if(callback && clearMsg['OnMeeting_join']) {
                    return (clearMsg['OnMeeting_join'].owner === roomInfo.owner && clearMsg['OnMeeting_join'].sessionid === roomInfo.sessionId)
                        ? callback(true) : callback(false, clearMsg['OnMeeting_join'].sessionid);
                } else
                    return;
            });


            //  踢出用户
            socket.on('eject_user', function (ejectInfo, callback) {
                updateRoomUserState(ejectInfo.owner, ejectInfo.channel, ejectInfo.sessionid, ejectInfo.friend, false, callback)
            });

            //  改变会议房间的用户状态
            function updateRoomUserState(owner, channel, sessionid, friend, state, callback) {
                global.dbHelper.updateRoomUserState(owner, channel, sessionid, friend, state, function (err, doc) {
                    if (doc) {
                        console.log("updata room user state " + state + "!");
                        if(callback) {
                            callback();
                        }
                    }
                    //  发送信号，让房主去更新房间的用户状态
                    socket.broadcast.emit('_update_RoomUserState', owner);
                });
            }

            socket.on('eject_all_user', function (ejectInfo, callback) {
                if (!currentUser) return;

                // autoCloseEntireSession = true;
                if (currentUser && currentUser.roomid && listOfRooms[currentUser.roomid]) {
                    delete listOfRooms[currentUser.roomid];
                }
                if(clearMsg['OnMeeting_open']) {
                    delete clearMsg['OnMeeting_open'];
                }
                // 修改所有房间中用户的状态
                global.dbHelper.updateRoomAllUserState(ejectInfo.owner, ejectInfo.channel, ejectInfo.sessionid, false, function (err, doc) {
                    if (err) {
                        return callback('关闭失败，请重新关闭或者重新登陆！');
                    }
                    console.log("updata room all user state false!")
                    callback();
                });
                //  清除对所有该会议中用户的邀请信息
                clear_invite_meeting_routs(ejectInfo);
                console.log('listofroom:' + util.inspect(listOfRooms));

            });

            socket.on('invite_all_user', function (roomInfo, callback) {
                var Users = [];
                global.dbHelper.getRoomAllUser(roomInfo.owner, roomInfo.channel, roomInfo.sessionid, function (err, userInfo, userNumber) {
                    if(err) {
                        return console.log('invite_all_user err:' + err);
                    }
                    if(!userInfo || !userNumber) {
                        return console.log('this room no user need invite');
                    }
                    if(userInfo) {
                        Users.push(userInfo);
                        if(Users.length === userNumber) {
                            console.log('ok invite all');
                            return callback(Users);
                        }
                    }
                });
            });

            //  用户强制离开网页时  清除会议信息  存储到clearMsg{}中，当监听到disconnect时去执行清除指令
            socket.on('try_DepartPage', function (data) {
                if(data.type === 'clear_meeting_routs') {
                    clearMsg['meeting_routs'] = data.meeting_routs;
                }
            });

            socket.on('out_room', function () {
                if(FlagJoinMeeting && clearMsg['OnMeeting_join']) {
                    var roomInfo = clearMsg['OnMeeting_join'];
                    updateRoomUserState(roomInfo.owner, roomInfo.channel, roomInfo.sessionid, roomInfo.friend, false, function () {
                        delete clearMsg['OnMeeting_join'];
                        console.log('用户数据 clearMsg[OnMeeting_join]已清除：' + util.inspect(clearMsg['OnMeeting_join']));
                    });
                }
            });

        }

        function clear_invite_meeting_routs(meeting) {
            //  清除对所有该会议中用户的邀请信息
            global.dbHelper.getRoomAllUser(meeting.owner, meeting.channel, meeting.sessionid, function (err, userInfo) {
                if (err) {
                    return;
                }
                if (userInfo) {
                    var rout = {
                        owner: meeting.owner,
                        channel: meeting.channel,
                        sessionid: meeting.sessionid
                    };
                    global.dbHelper.closeMeeting_clear(userInfo.user, rout, function () {
                        console.log('对用户' + userInfo.user + '的会议邀请信息清除成功！');
                        socket.broadcast.emit('_update_your_sessionRooms', userInfo.user);
                    });
                }
            });
        }

        function is_friend(friend, callback) {
            var length = userFriends.length;
            for(var i = 0; i < length; i++) {
                if(userFriends[i].name === friend) {
                    if(callback) {
                        return callback(true);
                    }
                }
            }
            return callback(false);
        }
        /************************  好友功能函数   **************/
        //   初始化好友添加的监听功能
        function init_AddFriend(socket) {
            //接受添加好友的请求信号
            socket.on('addFriendReq_1', function (subject, object) {
                console.log("subject object: " + subject + " 和 " + object);
                var userModel = global.dbHelper.getModel('user');
                //检测这个要添加的用户是否存在，是否有这个人
                userModel.findOne({name: object}, function (err, doc) {
                    if (err) {
                        console.log("addFriendReq_1 err:" + err);
                    } else {
                        if(!doc) {
                            socket.emit('_no user', "The user was not exist!");
                            console.log("_no user");
                            return;
                        }
                        var friendsModel = global.dbHelper.getModel('userFriends');
                        friendsModel.findOne({userName: subject}, function (err, friend) {
                            if (err) {
                                console.log("err:" + err);
                                return;
                            } else {
                                for (var m in friend.friends) {
                                    if (friend.friends[m].name === object) {
                                        socket.emit("already friend", object)//一旦发现好友中已经有这个人，就发送信号“已经是好友了！”
                                        return;
                                    }
                                }
                            }
                            //  保存这条记录
                            global.dbHelper.addUserRecord(subject, object);
                            //如果用户在线，则发送给用户这条好友请求信息（如果用户不在线，就需要 在每次用户链接到服务器的时候，去数据库检测信息并推送信息）
                            if( doc.state === true ) {
                                var data = {
                                    subject: subject,
                                    object: object
                                };
                                socket.broadcast.emit("addFriendReq_2", data);
                            }
                            else {
                                socket.emit("send invite");
                            }
                        });
                    }
                });
            });

            socket.on('addFriendRes_1', function (data) {
                console.log("addFriendRes_1:" + data.confirm);
                var result = 2;
                if (data.confirm) { //如果用户同意，则互相加为好友
                    console.log("confirm yes");
                    global.dbHelper.addFriend(data.subject, data.object);
                    global.dbHelper.addFriend(data.object, data.subject);
                    result = 1;
                }
                else {
                    console.log("confirm no");
                    var userModel = global.dbHelper.getModel('user');
                    userModel.findOne({name: data.subject}, function (err, doc) {
                        if(err) {
                            console.log("err:", err);
                            return;
                        }
                        if(doc.state === false) {
                            global.dbHelper.setRecRefuse(data.subject, data.object, true);
                        }
                    })
                    result = 0;
                }
                global.dbHelper.updateAddUserRec(data.subject, data.object, result);  //同意还是不同意呢。直接将结果写入数据库，用的时候再去查
                //广播信号，客户端通过object判断是否为自己，然后刷新好友列表
                socket.broadcast.emit("addFriendRes_2", data);
                //返回信号，刷新好友列表
                socket.emit("reFreshFriends", data);

                console.log("data:" + data.subject + data.object + data.result);
            });
            //  好友列表更新
            socket.on('update_friends_state', function (friend) {
                is_friend(friend, function (result) {
                    if (result) {
                        push_getFriendsState(socket);
                    }
                    else return;
                });
            });
            //  会议用户列表更新
            socket.on('update_RoomUserState', function () {
                push_getRooms(socket);
            });
            //  更新可加入会议
            socket.on('update_push_invite_room', function () {
                push_Invite_InRooms(socket);
            });
            socket.on('update_getSessions', function () {
                push_getSessions(socket);
            });

        };

        function init_Delete(socket) {
            socket.on('delete_friend', function (userName, friendName, callback) {
                global.dbHelper.deleteFriend(userName, friendName, function () {
                    console.log(userName + '删除' + friendName + '完成了！');
                    global.dbHelper.deleteFriend(friendName, userName, function () {
                        console.log(friendName + '删除' + userName + '完成了！');
                        if (callback)
                            callback();
                        //  解除好友关系后，删除关于会议中的一切关系
                        deleteFuncRooms(userName, friendName, function () {
                            //  成功删除会议中的一切关系后，双方分别刷新房间列表
                            push_getRooms(socket);  //
                            socket.emit('_update_RoomUserState', userName);
                            socket.broadcast.emit('_update_your_sessionRooms', friendName);
                        });
                        deleteFuncRooms(friendName, userName, function () {
                            socket.broadcast.emit('_update_RoomUserState', friendName);
                            socket.emit('_update_your_sessionRooms', userName);
                        });

                        //  解除好友关系后，双方分别刷新好友列表
                        socket.emit('_update_your_friendsState', userName);
                        socket.broadcast.emit('_update_your_friendsState', friendName);
                    });
                });
            });
            socket.on('delete_userInThisRoom', function (userName, channel, sessionid, friendName, callback) {
                deleteFuncRoom(userName, channel, sessionid, friendName, function () {
                    callback();
                    socket.emit('_update_RoomUserState', userName);
                    socket.broadcast.emit('_update_your_sessionRooms', friendName);
                });
            });

            function deleteFuncRooms(userName, friendName, callback) {
                global.dbHelper.deleteUserInRooms(userName, friendName, function (err, ret) {
                    console.log(userName + ' delete ' + friendName + ' in rooms! ' );
                    if(callback) callback();
                });
            }
            function deleteFuncRoom(userName, channel, sessionid, friendName, callback) {
                global.dbHelper.deleteUserInRoom(userName, channel, sessionid, friendName, function () {
                    callback();
                });
            }

            socket.on('dismiss_meeting', function (owner, channel, sessionid, callback) {
                var roomUsers = [];
                console.log('得到用户00：' + owner + " " + channel + " " + sessionid);

                global.dbHelper.getRoomAllUser(owner, channel, sessionid, function (err, userInfo, userNumber) {
                    if (err) {
                        return;
                    }
                    if (userInfo) {
                        console.log('得到用户：' + userInfo.user);
                        roomUsers.push(userInfo.user);
                        if(roomUsers.length === userNumber) {
                            async.forEach(roomUsers, function (user, callback) {
                                deleteFuncRoom(owner, channel, sessionid, user, function () {
                                    //  通过回调函数  对该用户发送会议解散的通知
                                    socket.broadcast.emit('_dismissAMeeting', user);
                                    global.dbHelper.create_disMissMeeting(owner, channel, sessionid, user, function (err) {
                                        if(err) {
                                            console.log('会议解散没有存入数据库');
                                            return;
                                        }
                                        else{
                                            socket.broadcast.emit('get_disMissMeeting', {
                                                owner: owner,
                                                sessionId: sessionid,
                                                channel: channel
                                            }, user, function (meeting, theOwner) {
                                                console.log('这个会议不再提醒：' + meeting.sessionId);
                                                global.dbHelper.delete_disMissMeeting(theOwner, meeting);
                                            });
                                            console.log('会议解散存入数据库');
                                        }
                                    });
                                    socket.broadcast.emit('_update_your_sessionRooms', user);
                                    return callback(null);
                                });
                            }, function (err) {
                                //  接下来 对这个会议房间记录进行删除
                                console.log('通知前台');
                                global.dbHelper.deleteRoom(owner, channel, sessionid, function() {
                                    socket.emit('_update_RoomUserState', owner);
                                    return callback();
                                });
                            });
                        }
                    }
                });
            });
        }

        /****************************** 消息推送  ***************************/
        // 初始化需要给客户端的推送消息
        function init_PushMessage(socket) {
            //
            setTimeout(function () {
                push_friendAdd(socket);
                push_friendRefuse(socket);
            }, 1500);

            setTimeout(function () {
                push_getRooms(socket);
                push_getSessions(socket);
            }, 2000);

            setTimeout(function () {
                push_Invite_InRooms(socket);
                push_getDisMissMeeting(socket);
            }, 2500);
        };

        //推送好友添加请求信息
        function push_friendAdd(socket) {
            var addUserModel = global.dbHelper.getModel("addUser");
            addUserModel.find(function (err, doc) {
                if(err) {
                    console.log("push_friendAdd err:" + err);
                    return;
                }
                if(!doc) {
                    return;
                }

                async.forEach(doc, function (rec, callback) {
                    if(rec.object === currentClient && rec.result === 2) {   //  所有object中是该用户的的记录都检测一遍，如果result是2,则推送消息，发送添加好友的信号
                         var data = {
                             subject: rec.subject,
                             object: rec.object
                         };
                        console.log('检测到一条好友添加请求！请求已发送');
                        socket.emit("addFriendReq_2", data);
                        return callback(null);
                    } else
                        return callback(null);
                }, function (err) {
                    console.log('已检测所有添加好友的请求！');
                });
            });
        };
        //推送好友添加的拒绝信息
        function push_friendRefuse(socket) {
            var addUserModel = global.dbHelper.getModel("addUser");
            addUserModel.find(function (err, doc) {
                if(err) {
                    console.log("push_friendRefuse err:" + err);
                    return;
                }
                if(!doc) {
                    return;
                }
                for(var m in doc) {
                    if(doc[m].subject === currentClient) {   //  所有subject中是该用户的的记录都检测一遍，如果refuse-true,则推送消息,发送不同意添加的消息
                        if(doc[m].refuse === true) {
                            var data = {
                                subject: doc[m].subject,
                                object: doc[m].object
                            };
                            socket.emit("addFriendrefuse", data);
                            global.dbHelper.setRecRefuse(data.subject, data.object, false); //设置为false  不再推送此消息了
                        }
                    }
                }
            });
        }
        //  获取房间会话列表    //  用户自己创建的会议
        function push_getRooms(socket) {
            global.dbHelper.getRoom_Creator(currentClient, function (err, rooms) {
                if (err) {
                    console.log(err);
                    return;
                }
                if (!rooms) {
                    console.log("no rooms!");
                    socket.emit("get_rooms_message", null);
                    socket.emit("get_rooms_message", null);
                    return;
                }
                //  获取房间的信息
                Rooms_Creator = [];
                /**************/
                async.forEach(rooms, function (room, callback) {
                    var newRoom = {
                        channel: room.channel,
                        sessionId: room.sessionId,
                        roomName: room.name,
                        roomUsers: []
                    };
                    global.dbHelper.getRoomAllUser(currentClient, room.channel, room.sessionId, function (err, userInfo, user_number) {
                        if (err) {
                            console.log("get rooms users err:" + err);
                        }
                        if(userInfo) {
                            newRoom.roomUsers.push(userInfo);
                            if (user_number === newRoom.roomUsers.length) {   //当获取房间中的全部用户
                                Rooms_Creator.push(newRoom);
                                return callback(null);
                            }
                        } else {
                            Rooms_Creator.push(newRoom);
                            return callback(null);
                        }

                    });
                }, function (err) {
                    console.log("get rooms message:" + util.inspect(Rooms_Creator));
                    socket.emit("get_rooms_message", Rooms_Creator);
                });

            });
        }
        //  用户加入的会议
        function push_getSessions(socket) {

            global.dbHelper.getRoom_Entrants(currentClient, function (err, sessions) {
                if(err) {
                    console.log(err);
                    return;
                }
                if(!sessions) {
                    console.log("no sessions!");
                    socket.emit("get_sessions_message", null);
                    return;
                }
                var Rooms_Entrants = [];
                for(var i = 0; i < sessions.length; i++) {
                    Rooms_Entrants.push({
                        sessionId: sessions[i].sessionId,
                        roomName: sessions[i].name,
                        theOwner: sessions[i].theOwner
                    });
                }
                console.log("get sessions message:" + util.inspect(Rooms_Entrants));
                socket.emit("get_sessions_message", Rooms_Entrants);
            });
        }
        //  获取邀请信息
        function push_Invite_InRooms(socket) {
            global.dbHelper.userMeeting_getInvite(currentClient, function (err, meetings) {
                if(err) {
                    return;
                }
                if(meetings) {
                    socket.emit('push_meeting_invite', meetings);
                    console.log('push_meeting_invite', util.inspect(meetings));
                }
            });
        }

        /*********  用户好友在线状态    *****/
        function push_getFriendsState(socket) {

            async.forEach(userFriends, function (friend, callback) {
                global.dbHelper.getUserState(friend.name, function (state) {
                    friend.state = state;
                    console.log(friend.name + ":  " + friend.state);
                    callback(null);
                });
            }, function (err) {
                console.log('get_friend_state', util.inspect(userFriends));
                socket.emit('get_friend_state', userFriends);
            });
        }
        /*********  获取解散的会议相关信息 **********/
        function push_getDisMissMeeting(socket) {
            global.dbHelper.get_disMissMeeting(currentClient, function (err, doc) {
                if(err || !doc) {
                    return
                } else {
                    async.forEach(doc, function (meeting, callback) {
                        emit_disMissMeeting(meeting);
                        callback(null);
                    }, function (err) {
                        console.log('用户' + currentClient + '解散会议的通知已经全部发送！');
                    });

                }
            });
        }
        function emit_disMissMeeting(meeting) {
            socket.emit('get_disMissMeeting', meeting, null, function (meeting) {
                console.log('这个会议不再提醒：' + meeting.sessionId);
                global.dbHelper.delete_disMissMeeting(currentClient, meeting);
            });
        }
    });
}
